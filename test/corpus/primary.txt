==================
3.1.1 Literal: numeric integer
==================

12

---

(module 
 (main_module 
  (integer_literal)))

==================
3.1.1 Literal: numeric decimal
==================

.5

---

(module 
 (main_module 
  (decimal_literal)))

==================
3.1.1 Literal: numeric double
==================

51.25E2

---

(module 
 (main_module 
  (double_literal)))


==================
3.1.1 Literal: string double quotes
==================

 "hello world"

---

(module 
 (main_module 
  (string_literal)))

==================
3.1.1 Literal: string single quotes
==================

 'hello world'

---

(module 
 (main_module 
  (string_literal)))

==================
 3.1.1 Literal: string with escaped quotes
==================

"He said, ""I don't like it."""
---

(module 
 (main_module 
  (string_literal 
   (escape_quote)
   (escape_quote)))) 

==================
3.1.1 Literal: string with escape apos
==================

'He said, ''I don''t like it.'''

---

(module 
 (main_module 
  (string_literal 
   (escape_apos) 
   (escape_apos)
   (escape_apos))))

=================
3.1.1 Literal: string with predefined entity ref
==================

"Ben &amp; Jerry&apos;s"

---

(module 
 (main_module 
  (string_literal 
   (predefined_entity_ref) 
   (predefined_entity_ref))))


==================
3.1.1 Literal: string with character reference
==================

"&#8364;99.50"

---

(module 
 (main_module 
  (string_literal 
   (char_ref))))

==================
3.1.2 Variable References: unprefixed
==================

$x

---

(module
 (main_module 
  (var (EQName (identifier)))))

==================
3.1.2 Variable References: namespace prefix and local part
==================

$example:fruit

---

(module 
 (main_module 
  (var (EQName (identifier) (identifier)))))

==================
3.1.2 Variable References: URIQualifiedName 	
==================

$Q{http://example.com/ns}invoice

-------------------

(module 
  (main_module 
  (var (EQName (uri_qualified_name)))))

==================
3.1.3 Parenthesized with constructed empty sequence
==================

()

-------------------

(module 
 (main_module 
  (parenthesized_expr)))

==================
3.1.3 Parenthesized with constructed sequence one item 
==================

( 1 )

---

(module 
 (main_module 
  (parenthesized_expr 
   (integer_literal))))

==================
3.1.3 Parenthesized with constructed sequence comma separated items
==================

( 1, 2 )

---

(module 
 (main_module 
 (parenthesized_expr 
   (integer_literal)
   (integer_literal))))

==================
3.1.3 Parenthesized with embeded sequences 5 items
==================

(10, (1, 2), (), (3, 4))

---

(module 
 (main_module 
 (parenthesized_expr 
   (integer_literal) 
   (parenthesized_expr (integer_literal) (integer_literal)) 
   (parenthesized_expr) 
   (parenthesized_expr (integer_literal) (integer_literal)))))

==================
3.1.4 Context Item Expression
==================

. 

---

(module 
 (main_module 
  (context_item_expr)))

==================
3.1.5 Static Function Call with identifier without arg
==================

array:size()

---

(module 
 (main_module 
 (function_call 
  (EQName (identifier) (identifier)) 
  (arguments))))

==================
3.1.5 Static Function Call with identifier with arg
==================

empty( $foo )
  ---

  (module 
 (main_module 
   (function_call (EQName (identifier)) 
    (arguments (argument (var (EQName (identifier))))))))

==================
3.1.5 Static Function Call with identifier with hyphen
==================

my:hyphen-function( $foo )
---

(module
 (main_module 
  (function_call 
   (EQName (identifier) (identifier)) 
   (arguments (var (EQName (identifier)))))))

==================
3.1.6 Named Function References: TODO
==================

fn:abs#1

---

(module
 (main_module 
 (named_function_ref 
  (EQName (identifier) (identifier))
  (integer_literal)
 ))) 

==================
3.1.7 Inline Function Expressions: simple
==================

function()  { 'hello world' }

---

(module 
 (main_module 
  (inline_function_expr (parameters) 
   (enclosed_expr (string_literal))))) 

==================
3.1.7 Inline Function: with args
==================

function ( $param1, $param2 )  {()}

---

(module 
 (main_module 
  (inline_function_expr 
   (parameters (parameter (EQName (identifier))) (parameter (EQName (identifier)))) 
   (enclosed_expr (parenthesized_expr)))))

==================
3.1.7 Inline Function: with arg type declaration
==================

function( $a as empty-sequence() )  { () }

---

(module 
 (main_module 
  (inline_function_expr 
   (parameters 
    (parameter (EQName (identifier)) 
     (type_declaration (sequence_type (empty_sequence))))) 
   (enclosed_expr (parenthesized_expr)))))

==================
3.1.7 Inline Function:  with return type declaration
==================

function( $a as item() ) as item()  { () }

---

(module 
 (main_module 
  (inline_function_expr 
   (parameters 
    (parameter (EQName (identifier)) 
     (type_declaration (sequence_type (any_item))))) 
   (type_declaration (sequence_type (any_item))) 
   (enclosed_expr (parenthesized_expr)))))

==================
3.1.7 Inline Function: sequence type occurrance indicator
==================

function( $a as item()* ) as item()+  { () }

---

(module 
 (main_module 
  (inline_function_expr 
   (parameters 
    (parameter (EQName (identifier)) 
     (type_declaration 
      (sequence_type (any_item) 
       (occurrence_indicator))))) 
   (type_declaration 
    (sequence_type (any_item) 
     (occurrence_indicator))) 
   (enclosed_expr (parenthesized_expr)))))
