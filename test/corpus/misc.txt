==================
3.4 Sequence Expressions
==================

(10, 1 to 4)

---

(module 
 (main_module 
  (parenthesized_expr (integer_literal) 
  (range_expr (integer_literal) (integer_literal)))))

==================
3.5 Arithmetic Expressions
==================

 3 div 2

---

(module 
 (main_module 
  (multiplicative_expr 
   (integer_literal) 
   (integer_literal))))


==================
3.6 String Concatenation Expressions
==================

"con" || "cat" || "enate"

---

(module 
 (main_module 
  (string_concat_expr (string_literal) 
   (string_concat_expr (string_literal) (string_literal)))))


==================
3.7 Comparison Expressions
==================

1 = 2

---

(module
 (main_module 
  (comparison_expr (integer_literal) (integer_literal))))

==================
3.8 Logical Expressions
==================

1 eq 1 and 2 eq 2

---

(module 
 (main_module 
  (and_expr 
  (comparison_expr (integer_literal) (integer_literal))
  (comparison_expr (integer_literal) (integer_literal)))))

==================
3.13 Unordered Expression 
==================

unordered { }

---

(module 
 (main_module 
  (unordered_expr (enclosed_expr))))

==================
3.13 Ordered Expression 
==================

ordered { }

---

(module 
 (main_module 
 (ordered_expr (enclosed_expr))))


==================
3.14 Conditional Expressions 
==================

if ( 'text' )
  then 'this'   
  else 'that'

---

(module 
 (main_module 
  (if_expr (string_literal) (string_literal) (string_literal))))

==================
3.14 Conditional:  main module with multiple if else
==================

if ( 'pigs walk on 4 legs' ) then 'good'  
else if ( 'pigs walk on 2 legs') then 'better' 
else 'pigs fly'

---

(module 
 (main_module 
  (if_expr (string_literal) (string_literal) 
   (if_expr (string_literal) (string_literal) (string_literal)))))

==================
3.15 Switch: main module with switch expr
==================

switch ( $animal )
   case "Cow" return "Moo"
   case "Cat" return "Meow"
   case "Duck" return "Quack"
   default return "What's that odd noise?"

---

(module 
 (main_module 
  (switch_expr (var_ref (identifier)) 
   (switch_clause (string_literal) (string_literal)) 
   (switch_clause (string_literal) (string_literal)) 
   (switch_clause (string_literal) (string_literal)) 
   (string_literal))))

==================
3.16 Quantified Expressions
==================

some $foo in $baa satisfies $boo

---

(module 
 (main_module 
  (quantified_expr (var_ref (identifier)) 
   (var_ref (identifier)) 
   (var_ref (identifier)))))

==================
3.17 Try/Catch Expressions
==================

try { 
} 
catch * { 
}

---

(module 
(main_module 
(try_catch_expr 
(try_clause (enclosed_expr)) 
(catch_clause (catch_error_list (name_test (wildcard))) (enclosed_expr)))))

==================
3.19 Simple map operator
==================

$emp ! ( $bang )

---

(module
(main_module
 (bang_expr 
  (var_ref (identifier)) 
  (parenthesized_expr (var_ref (identifier)))
 )))

==================
3.20 Arrow operator 
==================

$string => upper-case()
-------------------

(module 
 (main_module 
  (arrow_expr 
   (var_ref (identifier)) 
   (arrow_function (identifier) (arg_list))))) 


