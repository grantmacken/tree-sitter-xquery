SequenceType Syntax 

==================
2.5.4 SequenceType Syntax 
==================

( 
$N instance of empty-sequence(),
$N instance of item(),
$N instance of item()*
)

---

(module
 (main_module
  (parenthesized_expr 
   (instance_of_expr (var_ref (identifier)) 
    (sequence_type (empty_sequence)))
   (instance_of_expr (var_ref (identifier)) 
    (sequence_type (any_item)))
   (instance_of_expr (var_ref (identifier)) 
    (sequence_type (any_item) (occurrence_indicator)))
  )))

==================
2.5.4 Kind Tests 'node', 'comment', 'namespace-node', 'text'
==================

( 
$N instance of node(),
$N instance of comment(),
$N instance of namespace-node(),
$N instance of text()
)

---

(module 
 (main_module
  (parenthesized_expr 
   (instance_of_expr (var_ref (identifier)) (sequence_type (any_kind_test)))
   (instance_of_expr (var_ref (identifier)) (sequence_type (comment_test)))
   (instance_of_expr (var_ref (identifier)) (sequence_type (namespace_node_test)))
   (instance_of_expr (var_ref (identifier)) (sequence_type (text_test)))
  )))

==================
2.5.5.3 Element Test
==================

$N instance of element(person, xx ?)

---

(module 
 (main_module
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (element_test  
     (element_test_params
      (identifier) 
      (identifier) 
      (occurrence_indicator)))
   ))))

==================
2.5.5.4 Schema Element Test
==================

$N instance of  schema-element(customer)

---

(module 
 (main_module
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (schema_element_test 
    (identifier))))))

==================
2.5.5.5 Attribute Test 
==================

$N instance of attribute(price, currency)

---

(module 
 (main_module
 (instance_of_expr 
  (var_ref (identifier)) 
  (sequence_type 
   (attribute_test
    (identifier) 
    (identifier)))))) 

==================
2.5.5.6 Schema Attribute Test
==================

$N instance of schema-attribute(colors)

---

(module 
 (main_module
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (schema_attribute_test 
     (identifier))))))

==================
2.5.5.7 Any Function Test
==================

$N instance of function(*)

---

(module 
 (main_module
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (any_function_test 
     )))))

==================
2.5.5.7 Any Function Test with annotation
==================

$N instance of %assertion function(*)

---

(module 
 (main_module
 (instance_of_expr 
  (var_ref (identifier)) 
  (sequence_type 
   (any_function_test 
    (annotation (identifier))
    )))))

==================
2.5.5.7 Typed Function Test
==================

$F instance of function(int, int) as int

---

(module 
 (main_module 
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (typed_function_test 
     (sequence_type (atomic_or_union_type (identifier))) 
     (sequence_type (atomic_or_union_type (identifier)))
     (type_declaration (sequence_type (atomic_or_union_type (identifier)))))))))

==================
2.5.5.7 Typed Function Test with annotation assertion
==================

$F instance of %assertion function(int, int) as int

---

(module 
 (main_module 
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (typed_function_test 
     (annotation (identifier)) 
     (sequence_type (atomic_or_union_type (identifier))) 
     (sequence_type (atomic_or_union_type (identifier))) 
     (type_declaration 
      (sequence_type (atomic_or_union_type (identifier)))))
   )))) 

==================
2.5.5.7 Function Test with signature that matches any map, or any function
==================

$F instance of function(xs:anyAtomicType) as item()*

---

(module 
 (main_module 
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (typed_function_test (sequence_type (atomic_or_union_type (identifier) (identifier))) 
     (type_declaration (sequence_type (any_item) (occurrence_indicator))))))))

==================
2.5.5.7 Function Test, signature matches any array, or any function
==================

$F instance of function(xs:integer) as item()*

---
(module 
 (main_module 
  (instance_of_expr 
   (var_ref (identifier)) 
   (sequence_type 
    (typed_function_test (sequence_type (atomic_or_union_type (identifier) (identifier))) 
     (type_declaration (sequence_type (any_item) (occurrence_indicator))))))))

==================
2.5.5.8 Any Map Test 
==================

map {} instance of map(*)

---

(module 
 (main_module 
  (instance_of_expr 
   (map_constructor) 
   (sequence_type (any_map_test)))))

==================
2.5.5.8 Typed Map Test 
==================

$M instance of map(xs:integer, xs:string)

---

(module
(main_module 
 (instance_of_expr 
  (var_ref (identifier)) 
  (sequence_type 
   (typed_map_test (atomic_or_union_type (identifier) (identifier)) 
    (sequence_type (atomic_or_union_type (identifier) (identifier))))))))

==================
2.5.5.9 Any Array Test
==================

[] instance of array(*)

---

(module 
 (main_module 
  (instance_of_expr 
   (square_array_constructor) 
   (sequence_type (any_array_test)))))

==================
2.5.5.9 Typed Array Test square
==================

[ "foo" ] instance of array(xs:string)

---

(module 
 (main_module 
  (instance_of_expr 
   (square_array_constructor (string_literal)) 
   (sequence_type 
    (typed_array_test 
     (sequence_type (atomic_or_union_type (identifier) (identifier))))))))

==================
2.5.5.9 Typed Array Test curly
==================

array {"foo"} instance of array(xs:string)

---

(module
 (main_module 
 (instance_of_expr
  (curly_array_constructor  (enclosed_expr (string_literal)))
  (sequence_type 
   (typed_array_test 
    (sequence_type 
     (atomic_or_union_type 
      (identifier) (identifier))))))))

